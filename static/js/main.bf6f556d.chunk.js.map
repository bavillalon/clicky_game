{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/CardBox/index.js","components/Counter/index.js","App.js","index.js"],"names":["CharacterCard","props","onClick","console","log","id","handleScores","randomizeCards","className","alt","name","src","image","Wrapper","children","Title","title","content","CardBox","Counter","count","highScore","App","state","characters","charactersNotClicked","componentDidMount","setState","sort","a","b","Math","random","notClicked","filter","character","length","showModal","this","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"8sCAsBeA,MAnBf,SAAuBC,GACrB,OACE,yBAAKC,QAAS,WACZC,QAAQC,IAAIH,EAAMI,IAClBJ,EAAMK,aAAaL,EAAMI,IACzBJ,EAAMM,kBACLC,UAAU,qBACX,yBAAKA,UAAU,IACb,yBAAKA,UAAU,YAAYC,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,SAEzD,yBAAKJ,UAAU,WACb,2BACE,yCADF,IAC0BP,EAAMS,SCTzBG,MAJf,SAAiBZ,GACf,OAAO,yBAAKO,UAAU,WAAWP,EAAMa,WCQ1BC,MATf,SAAed,GACb,OACA,yBAAKO,UAAU,mCACb,wBAAIA,UAAU,SAASP,EAAMe,OAC7B,2BAAIf,EAAMgB,W,OCACC,MAJf,SAAiBjB,GACf,OAAO,yBAAKO,UAAU,qDAAqDP,EAAMa,WCUpEK,MAXf,SAAmBlB,GACf,OACE,yBAAKO,UAAU,oBACb,yBAAKA,UAAU,aACb,0BAAMA,UAAU,iBAAhB,kBAAgDP,EAAMmB,OACtD,0BAAMZ,UAAU,iBAAhB,eAA6CP,EAAMoB,cC6E9CC,E,2MApEbC,MAAQ,CACNC,WAAWA,EACXC,qBAAsB,GACtBL,MAAO,EACPC,UAAW,G,EAIbK,kBAAoB,WAClB,EAAKC,SAAS,CAAEF,qBAAsBD,K,EAIxCjB,eAAiB,WAEf,IAAMiB,EAAa,EAAKD,MAAMC,WAAWI,MAAK,SAAUC,EAAGC,GAAK,MAAO,GAAMC,KAAKC,YAElF,EAAKL,SAAS,CAAEH,WAAYA,K,EAI9BlB,aAAe,SAACD,GAEd,IAAM4B,EAAa,EAAKV,MAAME,qBAAqBS,QAAO,SAAUC,GAClE,OAAOA,EAAU9B,KAAOA,KAE1BF,QAAQC,IAAI,CAAC,EAAKmB,MAAME,qBAAqBW,OAAQH,EAAWG,SAC5D,EAAKb,MAAME,qBAAqBW,SAAWH,EAAWG,OACxD,EAAKT,SAAS,CAAEF,qBAAsBD,EAAYJ,MAAO,EAAIiB,WAAU,IAKvE,EAAKV,SAAS,CAAEF,qBAAsBQ,EAAYb,MAAO,EAAKG,MAAMH,MAAQ,IAAK,WAC3E,EAAKG,MAAMH,OAAS,EAAKG,MAAMF,WACjC,EAAKM,SAAS,CAAEN,UAAW,EAAKE,MAAMH,Y,wEAQpC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOJ,MAAO,eAAgBC,QAAS,wHAAvC,KACA,kBAAC,EAAD,CACEG,MAAOkB,KAAKf,MAAMH,MAClBC,UAAWiB,KAAKf,MAAMF,YAExB,kBAAC,EAAD,KACGiB,KAAKf,MAAMC,WAAWe,KAAI,SAAAJ,GAAS,OAClC,kBAAC,EAAD,CACE7B,aAAc,EAAKA,aACnBC,eAAgB,EAAKA,eACrBF,GAAI8B,EAAU9B,GACdmC,IAAKL,EAAU9B,GACfK,KAAMyB,EAAUzB,KAChBE,MAAOuB,EAAUvB,iB,GA9Db6B,a,MCRlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.bf6f556d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//handles each character and displays a card.\r\nfunction CharacterCard(props) {\r\n  return (\r\n    <div onClick={() => {\r\n      console.log(props.id);\r\n      props.handleScores(props.id);\r\n      props.randomizeCards();\r\n    }} className=\"col-3 m-md-3 card\">\r\n      <div className=\"\">\r\n        <img className=\"img-fluid\" alt={props.name} src={props.image} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <p>\r\n          <strong>Name:</strong> {props.name}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterCard;\r\n","import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\n//accepts the title and content ad props to be able to change them in the app component\r\nfunction Title(props) {\r\n  return (\r\n  <div className=\"container jumbotron text-center\">\r\n    <h1 className=\"title\">{props.title}</h1>\r\n    <p>{props.content}</p>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n//box for all of hte character cards to land\r\nfunction CardBox(props) {\r\n  return <div className=\"container d-flex flex-wrap justify-content-center\">{props.children}</div>;\r\n}\r\n\r\nexport default CardBox;\r\n","import React from \"react\";\r\n//counter for the top of page. accepts hte state props of count and highscore to display.\r\nfunction   Counter(props) {\r\n    return (\r\n      <div className=\"card text-center\">\r\n        <div className=\"card-body\">\r\n          <span className=\"m-3 card-text\">Current Score: {props.count}</span>\r\n          <span className=\"m-3 card-text\">High Score: {props.highScore}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default Counter;\r\n","//required imports, these include character cards where each character will be put, character box where all the characters will land\r\n//the characters json where the names and image paths are defined, the title where we can control what is in the jumbo tron\r\n// and the required REACT imports\r\nimport React, { Component } from \"react\";\r\nimport CharacterCard from \"./components/CharacterCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Title from \"./components/Title\";\r\nimport characters from \"./friends.json\";\r\nimport CardBox from \"./components/CardBox\";\r\nimport Counter from \"./components/Counter\";\r\n\r\n\r\n//using app as an extension of the component contructor of react to make the different parts of the page stateful.\r\nclass App extends Component {\r\n  // settting the state to characters and tracking variables for keeping track of the not clicked characters as well\r\n  //as the count and scores\r\n  state = {\r\n    characters:characters,\r\n    charactersNotClicked: [],\r\n    count: 0,\r\n    highScore: 0\r\n  };\r\n\r\n  //setting the initial state of the not clicked characters to the original state of the characters\r\n  componentDidMount = () => {\r\n    this.setState({ charactersNotClicked: characters });\r\n  }\r\n\r\n  //function to randomize the order of the cards. when the state is changed, the character cards will rerender\r\n  randomizeCards = () => {\r\n    // Filter this.state.friends for friends with an id not equal to the id being removed\r\n    const characters = this.state.characters.sort(function (a, b) { return 0.5 - Math.random() });\r\n    // Set this.state.friends equal to the new friends array\r\n    this.setState({ characters: characters });\r\n  };\r\n\r\n  //handles the scores by checking what characters wer enot clicked.\r\n  handleScores = (id) => {\r\n\r\n    const notClicked = this.state.charactersNotClicked.filter(function (character) {\r\n      return character.id !== id;\r\n    });\r\n    console.log([this.state.charactersNotClicked.length, notClicked.length]);\r\n    if (this.state.charactersNotClicked.length === notClicked.length) {\r\n      this.setState({ charactersNotClicked: characters, count: 0 , showModal:true});\r\n    }\r\n    else {\r\n      //set state accepts a callback since it's async so I'm using this to change the state of the high score once the current count is changed for a\r\n      //successful click.\r\n      this.setState({ charactersNotClicked: notClicked, count: this.state.count + 1 }, () => {\r\n        if (this.state.count >= this.state.highScore) {\r\n          this.setState({ highScore: this.state.count });\r\n        };\r\n      });\r\n\r\n    }\r\n  };\r\n\r\n  // renders the page in order and when the state is changed.\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Title title={\"Office Game!\"} content={\"Click on an Office character to score points. Make sure not to click the same person twice or your score will reset!\"}> </Title>\r\n        <Counter\r\n          count={this.state.count}\r\n          highScore={this.state.highScore}\r\n        />\r\n        <CardBox>\r\n          {this.state.characters.map(character => (\r\n            <CharacterCard\r\n              handleScores={this.handleScores}\r\n              randomizeCards={this.randomizeCards}\r\n              id={character.id}\r\n              key={character.id}\r\n              name={character.name}\r\n              image={character.image}\r\n            />\r\n          ))}\r\n        </CardBox>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}